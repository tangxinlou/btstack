---- btstack_uart Matches (40 in 2 files) ----
Hci_transport_h4.c (src):static const btstack_uart_block_t * btstack_uart;
Hci_transport_h4.c (src):    return btstack_uart->set_baudrate(baudrate);
Hci_transport_h4.c (src):    btstack_uart->receive_block(&hci_packet[read_pos], bytes_to_read);  
Hci_transport_h4.c (src):    btstack_uart->send_block(packet, size);
Hci_transport_h4.c (src):    btstack_uart->init(&uart_config);
Hci_transport_h4.c (src):    btstack_uart->set_block_received(&hci_transport_h4_block_read);
Hci_transport_h4.c (src):    btstack_uart->set_block_sent(&hci_transport_h4_block_sent);
Hci_transport_h4.c (src):    int res = btstack_uart->open();
Hci_transport_h4.c (src):    return btstack_uart->close();
Hci_transport_h4.c (src):    if (btstack_uart->get_supported_sleep_modes){
Hci_transport_h4.c (src):        supported_sleep_modes = btstack_uart->get_supported_sleep_modes();
Hci_transport_h4.c (src):    if (btstack_uart->set_wakeup_handler){
Hci_transport_h4.c (src):        btstack_uart->set_wakeup_handler(&hci_transport_h4_ehcill_wakeup_handler);
Hci_transport_h4.c (src):    btstack_uart->send_block(&ehcill_command_to_send, 1);
Hci_transport_h4.c (src):    btstack_uart->send_block(&ehcill_command_to_send, 1);
Hci_transport_h4.c (src):        btstack_uart->set_sleep(BTSTACK_UART_SLEEP_OFF);
Hci_transport_h4.c (src):                        btstack_uart->set_sleep(BTSTACK_UART_SLEEP_OFF);
Hci_transport_h4.c (src):                        btstack_uart->set_sleep(BTSTACK_UART_SLEEP_OFF);
Hci_transport_h4.c (src):                        btstack_uart->set_sleep(BTSTACK_UART_SLEEP_OFF);
Hci_transport_h4.c (src):                    btstack_uart->send_block(ehcill_tx_data, ehcill_tx_len);
Hci_transport_h4.c (src):            btstack_uart->set_sleep(btstack_uart_sleep_mode);
Hci_transport_h4.c (src):            btstack_uart->set_sleep(BTSTACK_UART_SLEEP_OFF);
Hci_transport_h4.c (src):    btstack_uart = uart_driver;
Hci_transport_h5.c (src):static const btstack_uart_block_t * btstack_uart;
Hci_transport_h5.c (src):    btstack_uart->send_block(slip_outgoing_buffer, pos);
Hci_transport_h5.c (src):        btstack_uart->set_parity(1);
Hci_transport_h5.c (src):                            btstack_uart->set_sleep(btstack_uart_sleep_mode);
Hci_transport_h5.c (src):    btstack_uart->receive_block(&hci_transport_link_read_byte, 1);    
Hci_transport_h5.c (src):            btstack_uart->set_sleep(btstack_uart_sleep_mode);
Hci_transport_h5.c (src):    btstack_uart->init(&uart_config);
Hci_transport_h5.c (src):    btstack_uart->set_block_received(&hci_transport_h5_block_received);
Hci_transport_h5.c (src):    btstack_uart->set_block_sent(&hci_transport_h5_block_sent);
Hci_transport_h5.c (src):    int res = btstack_uart->open();
Hci_transport_h5.c (src):        btstack_uart->set_parity(1);
Hci_transport_h5.c (src):    if (btstack_uart->get_supported_sleep_modes){
Hci_transport_h5.c (src):        supported_sleep_modes = btstack_uart->get_supported_sleep_modes();
Hci_transport_h5.c (src):    return btstack_uart->close();
Hci_transport_h5.c (src):            btstack_uart->set_sleep(BTSTACK_UART_SLEEP_OFF);
Hci_transport_h5.c (src):    int res = btstack_uart->set_baudrate(baudrate);
Hci_transport_h5.c (src):    btstack_uart = uart_driver;
